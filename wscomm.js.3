/*!
 *
 * Copyright(c) 2011 Vladimir Dronnikov <dronnikov@gmail.com>
 * MIT Licensed
 *
 */

//
// N.B. depends on underscore.js to normalize client side JS engines.
// we recommend you to look at ender.js to pack microlibs
//

(function(_, undefined) {
'use strict';

//
// well-known useful functions
//
var slice = Array.prototype.slice;
var push = Array.prototype.push;
var hasOwn = Object.prototype.hasOwnProperty;

//
// safely determine whether `prop` is an own property of `obj`
//
function has(obj, prop) {
	return hasOwn.call(obj, prop);
}

//
// determine loosely if obj is callable
//
function callable(obj) {
	// N.B. RegExp in V8 is also of type function,
	// however we can punt on this
	return typeof obj === 'function'; // && obj.call;
}

//
// simple nonce generator
//
function rnd() {
	return Math.floor(Math.random() * 1e9).toString(36);
}
function nonce() {
	return (Date.now() & 0x7fff).toString(36) + rnd() + rnd() + rnd();
}

//
// safely get a deep property of `obj` descending using elements
// in `path`
//
function drill(obj, path) {
	var part;
	if (_.isArray(path)) {
		for (var i = 0, l = path.length; i < l; i++) {
			part = path[i];
			obj = obj && has(obj, part) && obj[part] || null;
		}
		return obj;
	} else if (path == null) {
		return obj;
	} else {
		return obj && has(obj, path) && obj[path] || null;
	}
}

//
// invoke deep method of `this` identified by `path` with
// optional parameters
//
function invoke(path /*, args... */) {
	var fn = drill(this, path);
	callable(fn) && fn.apply(this, slice.call(arguments, 1));
}

//
// constant to denode in JSON that an object key is function
//
var THIS_IS_FUNC = '~-=(){}=-~';

//
// serialize an object.
// replace functions in `obj` with THIS_IS_FUNC signatures
//
function encode(obj, onlyVariables) {
	function replacer(k, v) {
		// vetoed properties no pasaran!
		if (v && v.veto) {
			v = undefined;
		} else if (callable(v) && !onlyVariables) {
			v = THIS_IS_FUNC;
		// raw remote functions no pasaran!
		} else if (v === THIS_IS_FUNC) {
			v = undefined;
		}
		return v;
	}
	// N.B. should circular dependency occur, pretend obj is empty
	try {
		var str = JSON.stringify(obj, replacer);
	} catch(err) {
		// ...silently fail
		str = '{}';
	}
	return str;
}

//
// deserialize a string to the object
//
function decode(str) {
	// JSON.parse can throw...
	try {
		var obj = JSON.parse(str);
	} catch(err) {
		obj = {};
	}
	return obj;
}

//
// shared context prototype. should provide on/un/emit/update
// N.B. anything put in prototype won't be shared with remote end.
function Context() {}

// eventing, stolen deliberately from Backbone :)
// TODO: inhibit syncing of underscored properties?
Context.prototype.on = function(ev, callback) {
	var calls = this._callbacks || (this._callbacks = {veto: true});
	var list  = this._callbacks[ev] || (this._callbacks[ev] = []);
	list.push(callback);
	return this;
};
Context.prototype.un = function(ev, callback) {
	var calls;
	if (!ev) {
		this._callbacks = {veto: true};
	} else if (calls = this._callbacks) {
		if (!callback) {
			calls[ev] = [];
		} else {
			var list = calls[ev];
			if (!list) return this;
			for (var i = 0, l = list.length; i < l; i++) {
				if (callback === list[i]) {
					list.splice(i, 1);
					break;
				}
			}
		}
	}
	return this;
};
Context.prototype.emit = function(ev) {
	var list, calls, i, l;
	if (!(calls = this._callbacks)) return this;
	if (list = calls[ev]) {
		for (i = 0, l = list.length; i < l; i++) {
			list[i].apply(this, Array.prototype.slice.call(arguments, 1));
		}
	}
	if (list = calls['all']) {
		for (i = 0, l = list.length; i < l; i++) {
			list[i].apply(this, arguments);
		}
	}
	return this;
};

//
// update this object with `changes`, firing 'change' events.
// if `options.reset` is truthy, remove all properties first.
// if `options.silent` is truthy, inhibit firing 'change' events
// if `options.send` is truthy, fire 'send' event afterwards
//
Context.prototype.update = function(changes, options) {
	if (!options) options = {};
	var self = this;
	var changed = false;

	//
	// deeply extend the `dst` with properties of `src`.
	// if a property of `src` is set to null then remove
	// corresponding property from `dst`.
	// N.B. arrays are cloned
	//
	function extend(dst, src) {
		function _ext(dst, src) {
			if (Object(src) !== src) return dst;
			for (var prop in src) if (src.hasOwnProperty(prop)) {
				var v = src[prop];
				var isValueArray = _.isArray(v);
				var d = dst[prop];
				// value is not ordinal?
				if (Object(v) === v) {
					// value is array?
					if (isValueArray) {
						// ...put its copy, not reference
						v = v.slice();
					// value is object?
					} else {
						// destination has no such property?
						if (!dst.hasOwnProperty(prop)) {
							// ...create one
							dst[prop] = {};
						}
					}
				}
				// value is ordinal. update property if value is
				// actually new.
				// emit self's "change:<property>" event
				if (!_.isEqual(v, d) && !options.silent) {
					changed = true;
					self.emit('change:' + prop, v, d, dst);
				}
				// destination is not ordinal?
				if (Object(d) === d && !isValueArray) {
					// ...recurse to merge
					_ext(d, v);
				// new value is undefined or null?
				} else if (v == null) {
					// ...remove the property
					delete dst[prop];
				} else {
					dst[prop] = v;
				}
			}
		}
		_ext(dst, src);
		// emit "change" event if anything has changed
		changed && self.emit('change', src, options);
	}

	// purge old properties properties
	if (options.reset) {
		for (var i in this) delete this[i];
	}

	// apply changes
	extend(this, changes);

	// FIXME: consider moving to 'change' event
	// notify of changes.
	// `options.reset` means to send this whole object.
	// falsy changes means to send this whole object.
	if (changed) {// && options.send) {
		if (options.reset || !changes) changes = this;
		this.emit('send', changes, options);
	}

	// allow for chaining
	return this;
};

//
// in browser?
//
var CLIENT_SIDE = typeof window !== 'undefined';

//
// upgrade socket prototype to support functions calls over the wire
// and state exchange between the two sides
//

var SocketProto = CLIENT_SIDE ?
	io.Socket.prototype :
	require('socket.io/lib/socket.io/client').prototype;

//
// invoke a remote function by `path`
//
SocketProto.rpc = function(path /*, args...*/) {
	// do the call
	var msg = {
		cmd: 'call',
		params: slice.call(arguments)
	};
	this.send(msg);
};

//
// revive functions from THIS_IS_FUNC signatures
//
SocketProto.reviveFunctions = function(obj) {
	var socket = this;
	function revive(obj, root) {
		// iterate over objects only
		if (obj !== Object(obj)) return;
		for (var prop in obj) if (has(obj, prop)) {
			// glue the path
			var path = root.concat([prop]);
			// "function" signature is met?
			if (obj[prop] === THIS_IS_FUNC) {
				// bind RPC caller
				obj[prop] = _.bind(socket.rpc, socket, path);
				// veto passing this function to remote side
				obj[prop].veto = true;
			// vanilla object
			} else {
				// recurse
				revive(obj[prop], path);
			}
		}
	}
	revive(obj, []);
};

//
// socket message arrived
//
SocketProto.onMessage = function(message) {
	if (!message) return;
	console.log('MESSAGE', message);
	var fn;
	// remote side calls this side method
	if (message.cmd === 'call') {
		// do call the method, if it's a callable indeed
		invoke.apply(this.context, message.params);
	// remote context has changed
	} else if (message.cmd === 'update' && CLIENT_SIDE) {
		var changes = message.params[0];
		var options = message.params[1] || {};
		// revive functions from THIS_IS_FUNC signatures
		this.reviveFunctions(changes);
		// update the context
		this.context.update(changes, options);
		// remote context first initialized?
		options.ready && this.context.emit('ready', this);
	}
};

//
// create shared context using `this` socket as transport layer
// `context` is template initial object
// N.B. should be overridden
//
SocketProto.createContext = function() {
	// cache
	var socket = this;
	// create shared context
	this.context = new Context();
	this.context.on('send', function(changes, options) {
		// notify remote end that context has changed
		// send serialized context to the remote end
		var s = encode({
			cmd: 'update',
			params: [changes, options]
		});
		// N.B. we have "insight" here of how socket.io serializes JSON ;)
		// FIXME: this should be fixed
		socket.send('~j~' + s);
	});
	// export the context
	return this.context;
};

//
// setup websocket communication
//

if (CLIENT_SIDE) {

	//
	// browser
	//

	// N.B. we export constructor, not singleton,
	// to allow having multiple instances

	var WSComm = function(host, options) {
		// set default options
		if (!options) options = {};
		_.defaults(options, {
			// N.B. bundlers may use RegExp("location['p'+'ort']") as anchor
			// to supply custom hardcoded port inplace
			port: location['p'+'ort'],
			secure: location.protocol === 'https:',
			transports: ['websocket', 'xhr-polling'],
			rememberTransport: false
		});
		// create socket
		var socket = new io.Socket(host, options);
		// attach message handlers
		socket.on('message', socket.onMessage);
		// create shared context
		var context = socket.createContext();
		// make connection. upon connection, context will emit 'ready' event
		socket.connect();
		// return the context
		return context;
	};

	// ender.js shim
	if (typeof module !== 'undefined' && module.exports) {
		module.exports.WSComm = WSComm;
	// or poison the global
	} else {
		this.WSComm = WSComm;
	}

} else {

	//
	// server
	//

	var IO = require('socket.io');
	require('./ws-patch');

	var listen = function(server, options) {

		// set default options
		if (!options) options = {};
		_.defaults(options, {
			transports: ['websocket', 'xhr-polling']
		});

		// start websocket listener
		var ws = IO.listen(server, options);
		// on client connection...
		ws
		.on('clientConnect', function(client) {
			// initialize shared context
			client.createContext();
			// N.B. the rest initialization is left for user code
		})
		.on('clientMessage', function(message, client) {
			client.onMessage(message);
		});

		// return the listener
		return ws;
	};

	// expose interface
	module.exports = {
		listen: listen,
		nonce: nonce,
		encode: encode,
		decode: decode
	};

}

})(typeof window !== 'undefined' ? this._ : require('underscore'));
