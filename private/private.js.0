'use strict';

var _ = require('underscore');
var Fs = require('fs');
var Ws = require('socket.io');
require('./ws-patch');
var Redis = require('redis');
var Backbone = require('backbone');

//
// well-known useful functions
//
var slice = Array.prototype.slice;
var push = Array.prototype.push;
var hasOwn = Object.prototype.hasOwnProperty;

//
// safely determine whether `prop` is an own property of `obj`
//
function has(obj, prop) {
	return hasOwn.call(obj, prop);
}

//
// determine loosely if obj is callable
//
function callable(obj) {
	// N.B. RegExp in V8 is also of type function,
	// however we can punt on this
	return typeof obj === 'function'; // && obj.call;
}

//
// simple nonce generator
//
function rnd() {
	return Math.floor(Math.random() * 1e9).toString(36);
}
function nonce() {
	return (Date.now() & 0x7fff).toString(36) + rnd() + rnd() + rnd();
}

//
// safely get a deep property of `obj` descending using elements
// in `path`
//
function drill(obj, path) {
	var part;
	if (_.isArray(path)) {
		for (var i = 0, l = path.length; i < l; i++) {
			part = path[i];
			obj = obj && has(obj, part) && obj[part] || null;
		}
		return obj;
	} else if (path == null) {
		return obj;
	} else {
		return obj && has(obj, path) && obj[path] || null;
	}
}

//
// invoke deep method of `this` identified by `path` with
// optional parameters
//
function caller(path) {
	var fn = drill(this, path);
	callable(fn) && fn.apply(this, slice.call(arguments, 1));
}

//
// invoke `caller` for each element of `list` filtered with `filter`
//
function invoke(list, filter, path) {
	var args = slice.call(arguments, 2);
	// filter the list if the filtering function is given
	if (callable(filter)) {
		list = _.filter(list, filter);
	// if `filter` is array, use it as list
	} else if (_.isArray(filter)) {
		list = filter;
	// else make list from `filter`
	} else if (Object(filter) === filter) {
		list = [filter];
	}
	// return the filtered list unless arguments to make call are given
	if (!args.length) return list;
	// for each item in list perform RPC call
	_.each(list, function(item) {
		// FIXME: pluck for context first?
		item.context.rpc.apply(item.context, args);
	});
}

/**
 * WebSocket server prototype
 */

Ws.encode = function(obj) {
	try {
		var str = JSON.stringify(obj);
	} catch(err) {
		// ...silently fail
		str = '';
	}
	return str;
};
Ws.decode = function(str) {
	// JSON.parse can throw...
	try {
		var obj = JSON.parse(str);
	} catch(err) {
		// ...silently fail
		obj = {};
	}
	return obj;
};
Ws.invoke = invoke;
Ws.nonce = nonce;

function Private(httpStack, httpPort) {

	// cache this
	var node = this;

	// HTTP
	this.http = connect.apply(null, httpStack);
	this.http.listen(httpPort);

	// WebSocket
	this.ws = Ws.listen(this.http, {
		transports: ['websocket', 'xhr-polling'],
		log: false
	});

	// new client connection
	this.ws.on('connection', this.onConnection);

	// persistence and broadcasting
	this.db = this.pub = Redis.createClient();

	// listen to broadcast messages
	this.sub = Redis.createClient();
	this.sub.subscribe('bcast');
	// N.B. we bind so that to have this node as `this` in the handler
	this.sub.on('message', _.bind(this.onBroadcast, this));

}

/**
 * Handle client connection
 */

Private.prototype.onConnection = function(client) {

	var socket = this;

	// get session
	var sid = client.listener.req.headers.cookie;
	sid = sid && sid.match(new RegExp('(?:^|;) *' +
		sessionOptions.session_key + '=([^;]*)'));
	sid = sid && sid[1];
	// deserialize cookie manually to extract `user.id` key
	if (sid) try {
		client.session = Cookie.deserialize(
			sessionOptions.secret, sessionOptions.timeout, sid);
		// extract client id from the session
		client.clientId = client.session.user.id;
		console.log('SESSION', client.session);
	} catch (err) {
		console.log('NO SESSION', err.stack);
	}
	// send initial context
	client.send('fooo');
};

/**
 * Invoke method found at `path` with `args`
 */

Private.prototype.invoke = function(path, args) {

	//console.log('INVOKING', arguments);
	this.pub.publish('bcast', Ws.encode({
		cmd: 'invoke',
		args: slice.call(arguments)
	}));

};

/**
 * Handle invocation message, sent by `Private::invoke()`
 */

Private.prototype.onBroadcast = function(pattern, message) {

	//console.log('BCASTEDMESSAGE', arguments);
	if (!message) return;
	message = Ws.decode(message);

	if (message.cmd === 'invoke') {
		// FIXME: null means all clients. howto use filters?
		var args = [this.ws.clients, null];
		push.apply(args, message.args);
		Ws.invoke.apply(this.ws, args);
	}

};

/**
 * middleware
 */

// secure sessions stored in cookie 'sid'
var Cookie = require('cookie-sessions');
var sessionOptions = {
	session_key: 'sid',
	secret: 'change-me-in-production-env',
	path: '/',
	timeout: 86400000
};

var connect = require('connect');
function middleware() {
	return [
		connect.favicon(),
		health('/haproxy?monitor'),
		connect.static(__dirname),
		connect.logger(),
		Cookie(sessionOptions),
		// handle auth, which should set req.session.user.id
		auth(),
	];
}
// singleton middleware stack
var stack = middleware();

/**
 * Listen to specified URL and respond with status 200
 * to signify this server is alive
 */

function health(url) {

	return function handler(req, res, next) {
		if (req.url === url) {
			res.writeHead(200);
			res.end();
		} else {
			next();
		}
	};

}

/**
 * Handle authentication
 */

function auth(url) {

	return function handler(req, res, next) {
		console.log('SESS', req.session);
		if (req.url === '/auth') {
			// put authentication logic here
			// ???
			// set the session so that we can persist the shared context
			req.session = {
				user: {
					id: Ws.nonce(),
					email: 'try@find.me'
				}
			};
			// go home
			res.writeHead(302, {location: '/'});
			res.end();
		} else {
			next();
		}
	};

}

function run(port) {
	var node = new Private(stack, port);
	return node;
}

/**
 * Expose interface
 */

exports = module.exports = {
	Private: Private,
	run: run
};
