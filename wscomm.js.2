/*
 *
 * Copyright(c) 2011 Vladimir Dronnikov <dronnikov@gmail.com>
 * MIT Licensed
 *
 */

//
// N.B. depends on underscore.js to normalize client side JS engines.
// we recommend you to look at ender.js to pack microlibs
//

(function(_, undefined) {
'use strict';

//
// well-known useful functions
//
var slice = Array.prototype.slice;
var push = Array.prototype.push;
var hasOwn = Object.prototype.hasOwnProperty;

//
// safely determine whether `prop` is an own property of `obj`
//
function has(obj, prop) {
	return hasOwn.call(obj, prop);
}

//
// determine loosely if obj is callable
//
function callable(obj) {
	// N.B. RegExp in V8 is also of type function,
	// however we can punt on this
	return typeof obj === 'function'; // && obj.call;
}

//
// simple nonce generator
//
function rnd() {
	return Math.floor(Math.random() * 1e9).toString(36);
}
function nonce() {
	return (Date.now() & 0x7fff).toString(36) + rnd() + rnd() + rnd();
}

//
// safely get a deep property of `obj` descending using elements
// in `path`
//
function drill(obj, path) {
	var part;
	if (_.isArray(path)) {
		for (var i = 0, l = path.length; i < l; i++) {
			part = path[i];
			obj = obj && has(obj, part) && obj[part] || null;
		}
		return obj;
	} else if (path == null) {
		return obj;
	} else {
		return obj && has(obj, path) && obj[path] || null;
	}
}

//
// invoke deep method of `this` identified by `path` with
// optional parameters
//
function caller(path) {
	var fn = drill(this, path);
	callable(fn) && fn.apply(this, slice.call(arguments, 1));
}

//
// constant to denode in JSON that an object key is function
//
var THIS_IS_FUNC = '~-=(){}=-~';

//
// serialize an object.
// replace functions in `obj` with THIS_IS_FUNC signatures
//
function encode(obj, onlyVariables) {
	function replacer(k, v) {
		// veto functions no pasaran!
		if (callable(v) && !v.veto && !onlyVariables) {
			v = THIS_IS_FUNC;
		// raw remote functions no pasaran!
		} else if (v === THIS_IS_FUNC) {
			v = undefined;
		}
		return v;
	}
	// should circular dependency occur, send nothing.
	// FIXME: until socket.io has tunable parsers (we opened the issue!)
	// even if we JSON.decycle(obj), the remote end won't parse ok
	// FIXME: until socket.io has tunable stringifier
	// we must workaround it
	try {
		var str = JSON.stringify(obj, replacer);
	} catch(err) {
		// ...silently fail
		str = '';
	}
	return str;
}

//
// deserialize a string to the object.
//
function decode(str, context) {
	// JSON.parse can throw...
	try {
		var obj = JSON.parse(str);
	} catch(err) {
		obj = {};
	}
	return obj;
}

//
// in browser?
//
var CLIENT_SIDE = typeof window !== 'undefined';

//
// upgrade socket prototype to support functions calls over the wire
// and state exchange between the two sides
//

var SocketProto = CLIENT_SIDE ?
	io.Socket.prototype :
	require('socket.io/lib/socket.io/client').prototype;

//
// update `this.context` with `changes` resetting it first
// if `options.reset` is truthy.
// if `options.send` is given send the changes to remote side
// TODO: this could be overridden to support custom context prototypes.
// Think of Backbone
//
SocketProto.updateContext = function(changes, options) {
	if (!options) options = {};
	var context = this.context;
	var socket = this;

//
// deeply extend the `dst` with properties of `src`.
// if a property of `src` is set to null then remove corresponding
// `dst` property.
// N.B. arrays are cloned
//
function extend(dst, src) {
	var changed = false;
	function _ext(dst, src) {
		if (!src) return dst;
		for (var prop in src) if (has(src, prop)) {
			var v = src[prop];
			var isValueArray = _.isArray(v);
			var d = dst[prop];
			// value is not ordinal?
			if (Object(v) === v) {
				// value is array?
				if (isValueArray) {
					// put its copy, not reference
					v = v.slice();
				// value is object?
				} else {
					// destination has no such property? create one
					if (!has(dst, prop)) dst[prop] = {};
				}
			}
			// value is ordinal. update property if value is actually new.
			// emit context's "change:<property>" event
			if (!_.isEqual(v, d) && !options.silent) {
				changed = true;
//console.log('CHEMIT', prop, v, d, dst);
				socket.emit('change:' + prop, [v, d, dst]);
			}
			// destination is not ordinal?
			if (Object(d) === d && !isValueArray) {
				// recurse to merge
console.log('RECURSE', _.extend({},d), _.extend({},v));
				_ext(d, v);
			// new value is undefined or null?
			} else if (v == null) {
				// remove the property
				delete dst[prop];
			} else {
				dst[prop] = v;
			}
		}
	}
	_ext(dst, src);
	// emit "change" event if anything has changed
	changed && socket.emit('change', [src]);
	return dst;
}

	// N.B. do not overwrite `context`, only mangle! That's why
	// this way of purging old context
	if (options.reset) {
		// we don't remove (and change as well) vetoed properties
		/*for (var i in context) if (has(context, i)) {
			if (!context[i] || !context[i].veto) delete context[i];
		}*/
		for (var i in context) delete context[i];
	}
	// apply changes
	extend(context, changes);
	//context.extend(changes, options);
	// persist changes
	options.save !== false && this.emit('save');
	// notify remote end that context has changed
	if (options.send) {
		// send serialized context to the remote end
		var s = encode({
			cmd: 'context',
			// `reset` controls whether to send the whole context replacing
			// the current one
			// N.B. no changes means to force sending the whole context.
			// this allows to group changes in "package" and send them
			// in one go
			params: [changes && !options.reset ? changes : context, options]
		});
		// N.B. we have "insight" here of how socket.io serializes JSON ;)
		// FIXME: this should be fixed
		this.send('~j~' + s);
	}
};

//
// invoke a remote function by `path`
//
SocketProto.cbs = {}; // callbacks
SocketProto.rpc = function(path, callback /*, args...*/) {
	var args = slice.call(arguments, 1);
	// register callback, if any
	if (callable(callback)) {
		// consume `callback` argument
		args.shift();
		// N.B. callbacks are deleted once they are fired.
		// unless a callback is fired, it holds the memory.
		// we should introduce expiration for callbacks
		var id = nonce();
		this.cbs[id] = callback;
	}
	// do the call
	var msg = {cmd: 'call', id: id, method: path, params: args};
	this.send(msg);
///this.send('~j~' + encode(msg));
};

//
// invoke callable at `path` for each client of `this` socket
// which passed `filter` test
// N.B. server-side only
//
SocketProto.invoke = function(filter, path) {
	var list = this.clients;
	var args = slice.call(arguments, 2);
	// filter the list if the filtering function is given
	if (callable(filter)) {
		list = _.filter(list, filter);
	// if `filter` is array, use it as list
	} else if (_.isArray(filter)) {
		list = filter;
	// else make list from `filter`
	} else if (Object(filter) === filter) {
		list = [filter];
	}
	// return the filtered list unless arguments to make call are given
	if (!args.length) return list;
	// for each item in list perform RPC call
	_.each(list, function(item) {
		this.rpc.apply(item, args);
	}, this);
}

//
// revive functions from THIS_IS_FUNC signatures
//
SocketProto.reviveFunctions = function(obj) {
	var socket = this;
	function revive(obj, root) {
		// iterate over objects only
		if (obj !== Object(obj)) return;
		for (var prop in obj) if (has(obj, prop)) {
			// glue the path
			var path = root.concat([prop]);
			// "function" signature is met?
			if (obj[prop] === THIS_IS_FUNC) {
				// bind RPC caller
				obj[prop] = _.bind(SocketProto.rpc, socket, path);
				// veto passing this function to remote side
				obj[prop].veto = true;
			// vanilla object
			} else {
				// recurse
				revive(obj[prop], path);
			}
		}
	}
	revive(obj, []);
};

//
// send the reply to remote side. it will result in calling the
// callback associated with this message `id`, at the remote side
//
SocketProto.reply = function(id /*, args... */) {
	// nothing to do unless `id` is set
	if (!id) return;
	var args = slice.call(arguments, 1);
	this.send({cmd: 'reply', id: id, params: args});
};

//
// socket message arrived
//
SocketProto.onMessage = function(message) {
	if (!message) return;
	console.log('MESSAGE', message);
	var fn;
	// remote side calls this side method
	if (message.cmd === 'call' &&
		(fn = drill(this.context, message.method))) {
		// the signature of remotely callable method is
		// function(callback[, arg1[, arg2[, ...]]]). so we always place
		// a callback stub to fit the signature
		var args = [_.bind(SocketProto.reply, this, message.id)];
		// revive functions from THIS_IS_FUNC signatures
///this.reviveFunctions(message);
		// optional arguments come from message.params
		message.params && push.apply(args, message.params);
		// do call the method, if it's a function indeed
		callable(fn) && fn.apply(this.context, args);
	// uniquely identified reply from the remote side arrived.
	// given reply id, lookup and call corresponding callback
	} else if (message.cmd === 'reply' && message.id &&
		(fn = this.cbs[message.id])) {
		// remove the callback to please GC
		delete this.cbs[message.id];
		// callback
		fn.apply(this.context, message.params);
	// remote context has changed
	} else if (message.cmd === 'context') {
		var changes = message.params[0];
		var options = message.params[1] || {};
		// revive functions from THIS_IS_FUNC signatures
		this.reviveFunctions(changes);
		// update the context
		delete options.send;
		this.updateContext(changes, options);
		// remote context first initialized?
		options.ready && this.emit('ready');
	}
};

//
// create shared context using `this` socket as transport layer
// `context` is template initial object
//
SocketProto.createContext = function(proto) {
	// cache
	var socket = this;
	// shared context prototype
	// N.B. anything put in prototype won't be shared with remote end.
	function Context() {}
	if (proto) {
		Context.prototype = _.extend({}, proto);
	}
	//Context.prototype.extend = _.bind(extend, context);
	Context.prototype.on = _.bind(this.on, this);
	//Context.prototype.once = _.bind(this.once, this);
	// create shared context
	this.context = new Context();
	//this.context.extend = _.bind(extend, this, this.context);
	/*this.context.on = _.bind(this.on, this);
	this.context.on.veto = true;
	this.context.once = _.bind(this.once, this);
	this.context.once.veto = true;*/

	// export the context
	return this.context;
};

//
// setup websocket communication
//

if (CLIENT_SIDE) {

	//
	// browser
	//

	// N.B. we export constructor, not singleton,
	// to allow having multiple instances

	var WSComm = function(host, options) {
		// set default options
		if (!options) options = {};
		_.defaults(options, {
			// N.B. bundlers may use RegExp("location['p'+'ort']") as anchor
			// to supply custom hardcoded port
			port: location['p'+'ort'],
			secure: location.protocol === 'https:',
			transports: ['websocket', 'xhr-polling'],
			rememberTransport: false,
			// custom object to be used as shared context prototype
			proto: null
		});
		// create socket
		var socket = new io.Socket(host, options);
		// attach message handlers
		socket.on('message', socket.onMessage);
		// create shared context
		var ctx = socket.createContext(options.proto);
		// make connection. upon connection, context will emit 'ready' event
		socket.connect();
		// return the context
		return ctx;
	};

	// ender.js shim
	if (typeof module !== 'undefined' && module.exports) {
		module.exports.WSComm = WSComm;
	// or poison the global
	} else {
		window.WSComm = WSComm;
	}

} else {

	//
	// server
	//

	var listen = function(server, options) {

		// set default options
		if (!options) options = {};
		_.defaults(options, {
			transports: ['websocket', 'xhr-polling']
		});

		//var IO = require('Socket.IO-node'); // upcoming 0.7.0
		var IO = require('socket.io');
		var older = IO.version.substring(0,3) === '0.6';
		// patch older socket.io
		if (older) (function() {
		// patch listener to always provide request object
		var onConnection = IO.Listener.prototype._onConnection;
		IO.Listener.prototype._onConnection =
			function(transport, req, res, httpUpgrade, head) {
				// memo the request
				this.req = req;
				onConnection.apply(this, arguments);
			};
		// patch ws/wss logic
		var WSTpt = require('socket.io/lib/socket.io/transports/websocket');
		WSTpt.prototype._isSecure = function() {
			// N.B. we always "mirror" security: https -> wss, http -> ws
			return this.request.headers.origin.substring(0, 6) === 'https:';
		};
		// patch session id generator.
		// useful to provide a stronger nonce, e.g.
		if (options.generateSessionId) {
			var Client = require('socket.io/lib/socket.io/client');
			Client.prototype._generateSessionId = options.generateSessionId;
		}
		})();

		// start websocket listener
		var ws = IO.listen(server, options);

		// on client connection...
		(older ? ws : ws.sockets).on('connection', function(client) {
			// initialize shared context
			client.createContext();
			// attach message handler
			client.on('message', client.onMessage);
			// the rest initialization is left for user  code
		});

		ws.__defineGetter__('ctx', function() {return _.toArray(this.clients)[0].context;});

		// return the listener
		return older ? ws : ws.sockets;
	};

	// expose interface
	module.exports = {
		listen: listen,
		nonce: nonce,
		invoke: invoke,
		encode: encode,
		decode: decode
	};

}

})(typeof window !== 'undefined' ? this._ : require('underscore'));
